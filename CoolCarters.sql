-- Drop Tables in Order (Child Before Parent)
DROP TABLE PRODUCT_CART CASCADE CONSTRAINTS;
DROP TABLE PRODUCT_WISHLIST CASCADE CONSTRAINTS;
DROP TABLE PRODUCT_ORDER CASCADE CONSTRAINTS;
DROP TABLE COUPON_have_CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE STOCK CASCADE CONSTRAINTS;
DROP TABLE DISCOUNT CASCADE CONSTRAINTS;
DROP TABLE PAYMENT CASCADE CONSTRAINTS;
DROP TABLE CART CASCADE CONSTRAINTS;
DROP TABLE ORDER_TABLE CASCADE CONSTRAINTS;
DROP TABLE REPORT CASCADE CONSTRAINTS;
DROP TABLE REVIEW CASCADE CONSTRAINTS;
DROP TABLE WISHLIST CASCADE CONSTRAINTS;
DROP TABLE PRODUCT CASCADE CONSTRAINTS;
DROP TABLE CATEGORY CASCADE CONSTRAINTS;
DROP TABLE SHOP CASCADE CONSTRAINTS;
DROP TABLE TRADER CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE ADMIN CASCADE CONSTRAINTS;
DROP TABLE USER_TABLE CASCADE CONSTRAINTS;
DROP TABLE COLLECTION_SLOT CASCADE CONSTRAINTS;
DROP TABLE INVOICE CASCADE CONSTRAINTS;
DROP TABLE COUPON CASCADE CONSTRAINTS;

-- USER Supertype Table
CREATE TABLE USER_TABLE (
  User_ID INTEGER NOT NULL,
  First_Name VARCHAR2(30),
  Last_Name VARCHAR2(50),
  Gender VARCHAR2(20),
  Email VARCHAR2(100),
  Password VARCHAR2(256),
  Phone_Number VARCHAR2(20),
  Address VARCHAR2(100),
  Role VARCHAR2(20) CHECK (Role IN ('Admin', 'Trader', 'Customer')),
  CreatedAt TIMESTAMP,
  UpdatedAt TIMESTAMP,
  CONSTRAINT pk_USER_TABLE PRIMARY KEY (User_ID)
);
ALTER TABLE USER_TABLE
  ADD PROFILE_PIC BLOB;

-- TRADER Subtype Table
CREATE TABLE TRADER (
  User_ID INTEGER NOT NULL,
  Company_Name VARCHAR2(100) NOT NULL,
  Action VARCHAR2(20),
  Status VARCHAR2(20) DEFAULT 'Pending' NOT NULL,
  CONSTRAINT pk_TRADER PRIMARY KEY (User_ID),
  CONSTRAINT fk_TRADER_USER FOREIGN KEY (User_ID) REFERENCES USER_TABLE(User_ID) ON DELETE CASCADE
);

-- CUSTOMER Subtype Table
CREATE TABLE CUSTOMER (
  User_ID INTEGER NOT NULL,
  Loyalty_Points INTEGER,
  CONSTRAINT pk_CUSTOMER PRIMARY KEY (User_ID),
  CONSTRAINT fk_CUSTOMER_USER FOREIGN KEY (User_ID) REFERENCES USER_TABLE(User_ID) ON DELETE CASCADE
);

-- ADMIN Subtype Table
CREATE TABLE ADMIN (
  User_ID INTEGER NOT NULL,
  Previleges VARCHAR2(255),
  User_Management_Access NUMBER(1),
  CONSTRAINT pk_ADMIN PRIMARY KEY (User_ID),
  CONSTRAINT fk_ADMIN_USER FOREIGN KEY (User_ID) REFERENCES USER_TABLE(User_ID) ON DELETE CASCADE
);

-- SHOP Table
CREATE TABLE SHOP (
  Shop_ID INTEGER NOT NULL,
  Shop_Name VARCHAR2(100) NOT NULL,
  Location VARCHAR2(150),
  Description VARCHAR2(500),
  Trader_ID INTEGER NOT NULL,
  CONSTRAINT pk_SHOP PRIMARY KEY (Shop_ID),
  CONSTRAINT fk_SHOP_TRADER FOREIGN KEY (Trader_ID) REFERENCES TRADER(User_ID)
);

-- CATEGORY Table
CREATE TABLE CATEGORY (
  Category_ID INTEGER NOT NULL,
  Category_Name VARCHAR2(50),
  CONSTRAINT pk_CATEGORY PRIMARY KEY (Category_ID)
);

-- immediately after your CREATE TABLE CATEGORY (...) statement:

BEGIN
  INSERT INTO CATEGORY (Category_ID, Category_Name)
    VALUES (seq_category.NEXTVAL, 'Butchers');
  INSERT INTO CATEGORY (Category_ID, Category_Name)
    VALUES (seq_category.NEXTVAL, 'Greengrocer');
  INSERT INTO CATEGORY (Category_ID, Category_Name)
    VALUES (seq_category.NEXTVAL, 'Fishmonger');
  INSERT INTO CATEGORY (Category_ID, Category_Name)
    VALUES (seq_category.NEXTVAL, 'Bakery');
  INSERT INTO CATEGORY (Category_ID, Category_Name)
    VALUES (seq_category.NEXTVAL, 'Delicatessen');
  COMMIT;
END;
/


--PRODUCT TABLE
CREATE TABLE PRODUCT (
  Product_ID INTEGER NOT NULL,
  Product_Name VARCHAR2(100),
  Price NUMBER(10,2),
  Product_Image BLOB,
  Minimum_Order INTEGER NOT NULL,
  Maximum_Order INTEGER NOT NULL,
  Category VARCHAR2(30) 
    CHECK (Category IN ('Butchers', 'Greengrocer', 'Fishmonger', 'Bakery', 'Delicatessen')) NOT NULL,
  Stock INTEGER NOT NULL,
  Allergy_Warning VARCHAR2(4000),
  fk1_Shop_ID INTEGER NOT NULL,
  fk2_Category_ID INTEGER NOT NULL,
  CONSTRAINT pk_PRODUCT PRIMARY KEY (Product_ID),
  CONSTRAINT fk_PRODUCT_SHOP FOREIGN KEY (fk1_Shop_ID) REFERENCES SHOP(Shop_ID),
  CONSTRAINT fk_PRODUCT_CATEGORY FOREIGN KEY (fk2_Category_ID) REFERENCES CATEGORY(Category_ID)
);


-- WISHLIST Table
CREATE TABLE WISHLIST (
  Wishlist_ID INTEGER NOT NULL,
  No_Of_Products INTEGER,
  fk1_User_ID INTEGER NOT NULL,
  CONSTRAINT uq_WISHLIST_USER UNIQUE(fk1_User_ID),
  CONSTRAINT pk_WISHLIST PRIMARY KEY (Wishlist_ID)
);

-- REVIEW Table
CREATE TABLE REVIEW (
  Review_ID INTEGER NOT NULL,
  Rating NUMBER(8,2),
  fk1_Product_ID INTEGER NOT NULL,
  fk2_User_ID INTEGER NOT NULL,
  CONSTRAINT pk_REVIEW PRIMARY KEY (Review_ID)
);

-- REPORT Table
CREATE TABLE REPORT (
  Report_ID INTEGER NOT NULL,
  Report_Date DATE,
  fk1_Order_ID INTEGER NOT NULL,
  fk2_User_ID INTEGER NOT NULL,
  CONSTRAINT uq_REPORT_ORDER UNIQUE(fk1_Order_ID),
  CONSTRAINT pk_REPORT PRIMARY KEY (Report_ID)
);

-- ORDER_TABLE
CREATE TABLE ORDER_TABLE (
  Order_ID INTEGER NOT NULL,
  Order_Date DATE,
  fk1_Slot_ID INTEGER NOT NULL,
  fk2_User_ID INTEGER NOT NULL,
  CONSTRAINT pk_ORDER_TABLE PRIMARY KEY (Order_ID)
);

-- CART Table
CREATE TABLE CART (
  Cart_ID INTEGER NOT NULL,
  Total_Price NUMBER(10,2),
  fk1_User_ID INTEGER NOT NULL,
  CONSTRAINT uq_CART_USER UNIQUE(fk1_User_ID),
  CONSTRAINT pk_CART PRIMARY KEY (Cart_ID)
);

-- PAYMENT Table
CREATE TABLE PAYMENT (
  Payment_ID INTEGER NOT NULL,
  Payment_Date DATE,
  Total_Amount NUMBER(10,2),
  fk1_Order_ID INTEGER NOT NULL,
  fk2_Invoice_ID INTEGER NOT NULL,
  CONSTRAINT uq_PAYMENT_ORDER UNIQUE(fk1_Order_ID),
  CONSTRAINT pk_PAYMENT PRIMARY KEY (Payment_ID)
);

-- DISCOUNT Table
CREATE TABLE DISCOUNT (
  Discount_ID INTEGER NOT NULL,
  Start_Date DATE,
  End_Date INTEGER,
  Discount_Percentage NUMBER(10,2),
  Expiry_Date DATE,
  fk1_Product_ID INTEGER NOT NULL,
  CONSTRAINT uq_DISCOUNT_PRODUCT UNIQUE(fk1_Product_ID),
  CONSTRAINT pk_DISCOUNT PRIMARY KEY (Discount_ID)
);

-- COLLECTION_SLOT Table
CREATE TABLE COLLECTION_SLOT (
  Slot_ID INTEGER NOT NULL,
  Slot_Time TIMESTAMP,
  Slot_Date DATE,
  CONSTRAINT pk_COLLECTION_SLOT PRIMARY KEY (Slot_ID)
);

-- PRODUCT_ORDER Table
CREATE TABLE PRODUCT_ORDER (
  Product_ID INTEGER NOT NULL,
  Order_ID   INTEGER NOT NULL,
  CONSTRAINT pk_product_order PRIMARY KEY (Product_ID, Order_ID),
  CONSTRAINT fk_product_order_product FOREIGN KEY (Product_ID) REFERENCES PRODUCT(Product_ID),
  CONSTRAINT fk_product_order_order FOREIGN KEY (Order_ID) REFERENCES ORDER_TABLE(Order_ID)
);

ALTER TABLE PRODUCT_ORDER ADD (QUANTITY INTEGER DEFAULT 1);

-- PRODUCT_CART Table
CREATE TABLE PRODUCT_CART (
  Product_ID INTEGER NOT NULL,
  Cart_ID    INTEGER NOT NULL,
  Quantity INTEGER,  
  CONSTRAINT pk_product_cart PRIMARY KEY (Product_ID, Cart_ID),
  CONSTRAINT fk_product_cart_product FOREIGN KEY (Product_ID) REFERENCES PRODUCT(Product_ID),
  CONSTRAINT fk_product_cart_cart FOREIGN KEY (Cart_ID) REFERENCES CART(Cart_ID)
);

-- PRODUCT_WISHLIST Table
CREATE TABLE PRODUCT_WISHLIST (
  Product_ID   INTEGER NOT NULL,
  Wishlist_ID  INTEGER NOT NULL,
  CONSTRAINT pk_product_wishlist PRIMARY KEY (Product_ID, Wishlist_ID),
  CONSTRAINT fk_product_wishlist_product FOREIGN KEY (Product_ID) REFERENCES PRODUCT(Product_ID),
  CONSTRAINT fk_product_wishlist_wishlist FOREIGN KEY (Wishlist_ID) REFERENCES WISHLIST(Wishlist_ID)
);

-- INVOICE Table
CREATE TABLE INVOICE (
  Invoice_ID INTEGER NOT NULL,
  Amount NUMBER(10,2),
  Generated_Date DATE,
  CONSTRAINT pk_INVOICE PRIMARY KEY (Invoice_ID)
);

-- STOCK Table
CREATE TABLE STOCK (
  Stock_ID INTEGER NOT NULL,
  Stock_Date DATE,
  Min_Order INTEGER,
  MaxOrder INTEGER,
  fk1_Product_ID INTEGER NOT NULL,
  CONSTRAINT uq_STOCK_PRODUCT UNIQUE(fk1_Product_ID),
  CONSTRAINT pk_STOCK PRIMARY KEY (Stock_ID)
);

-- COUPON Table
CREATE TABLE COUPON (
  Coupon_ID INTEGER NOT NULL,
  Coupon_Code VARCHAR2(50),
  Discount_Amount NUMBER(10,2),
  Expiry_Date DATE,
  fk1_Order_ID INTEGER NOT NULL,
  CONSTRAINT pk_COUPON PRIMARY KEY (Coupon_ID)
);

-- COUPON_HAVE_CUSTOMER Table
CREATE TABLE COUPON_have_CUSTOMER (
  s_Coupon_ID INTEGER NOT NULL,
  d_User_ID INTEGER NOT NULL,
  CONSTRAINT pk_COUPON_have_CUSTOMER PRIMARY KEY (s_Coupon_ID),
  CONSTRAINT fk1_COUPON_have_CUSTOMER FOREIGN KEY(s_Coupon_ID) REFERENCES COUPON(Coupon_ID),
  CONSTRAINT fk2_COUPON_have_CUSTOMER FOREIGN KEY(d_User_ID) REFERENCES CUSTOMER(User_ID)
);

-- Drop Sequences First (if exist)
DROP SEQUENCE seq_user_table;
DROP SEQUENCE seq_shop;
DROP SEQUENCE seq_product;
DROP SEQUENCE seq_category;
DROP SEQUENCE seq_wishlist;
DROP SEQUENCE seq_review;
DROP SEQUENCE seq_report;
DROP SEQUENCE seq_order_table;
DROP SEQUENCE seq_cart;
DROP SEQUENCE seq_payment;
DROP SEQUENCE seq_discount;
DROP SEQUENCE seq_collection_slot;
DROP SEQUENCE seq_invoice;
DROP SEQUENCE seq_stock;
DROP SEQUENCE seq_coupon;

-- [TABLE DEFINITIONS REMAIN HERE - OMITTED FOR BREVITY ABOVE] --

-- Create Sequences
CREATE SEQUENCE seq_user_table START WITH 1001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_shop START WITH 2001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_product START WITH 3001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_category START WITH 4001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_wishlist START WITH 5001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_review START WITH 6001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_report START WITH 7001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_order_table START WITH 8001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_cart START WITH 9001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_payment START WITH 10001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_discount START WITH 11001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_collection_slot START WITH 12001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_invoice START WITH 13001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_stock START WITH 14001 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE seq_coupon START WITH 15001 INCREMENT BY 1 NOCACHE NOCYCLE;

-- Create Triggers
CREATE OR REPLACE TRIGGER trg_user_table_bi BEFORE INSERT ON USER_TABLE FOR EACH ROW BEGIN IF :NEW.User_ID IS NULL THEN SELECT seq_user_table.NEXTVAL INTO :NEW.User_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_shop_bi BEFORE INSERT ON SHOP FOR EACH ROW BEGIN IF :NEW.Shop_ID IS NULL THEN SELECT seq_shop.NEXTVAL INTO :NEW.Shop_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_product_bi BEFORE INSERT ON PRODUCT FOR EACH ROW BEGIN IF :NEW.Product_ID IS NULL THEN SELECT seq_product.NEXTVAL INTO :NEW.Product_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_category_bi BEFORE INSERT ON CATEGORY FOR EACH ROW BEGIN IF :NEW.Category_ID IS NULL THEN SELECT seq_category.NEXTVAL INTO :NEW.Category_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_wishlist_bi BEFORE INSERT ON WISHLIST FOR EACH ROW BEGIN IF :NEW.Wishlist_ID IS NULL THEN SELECT seq_wishlist.NEXTVAL INTO :NEW.Wishlist_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_review_bi BEFORE INSERT ON REVIEW FOR EACH ROW BEGIN IF :NEW.Review_ID IS NULL THEN SELECT seq_review.NEXTVAL INTO :NEW.Review_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_report_bi BEFORE INSERT ON REPORT FOR EACH ROW BEGIN IF :NEW.Report_ID IS NULL THEN SELECT seq_report.NEXTVAL INTO :NEW.Report_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_order_table_bi BEFORE INSERT ON ORDER_TABLE FOR EACH ROW BEGIN IF :NEW.Order_ID IS NULL THEN SELECT seq_order_table.NEXTVAL INTO :NEW.Order_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_cart_bi BEFORE INSERT ON CART FOR EACH ROW BEGIN IF :NEW.Cart_ID IS NULL THEN SELECT seq_cart.NEXTVAL INTO :NEW.Cart_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_payment_bi BEFORE INSERT ON PAYMENT FOR EACH ROW BEGIN IF :NEW.Payment_ID IS NULL THEN SELECT seq_payment.NEXTVAL INTO :NEW.Payment_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_discount_bi BEFORE INSERT ON DISCOUNT FOR EACH ROW BEGIN IF :NEW.Discount_ID IS NULL THEN SELECT seq_discount.NEXTVAL INTO :NEW.Discount_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_collection_slot_bi BEFORE INSERT ON COLLECTION_SLOT FOR EACH ROW BEGIN IF :NEW.Slot_ID IS NULL THEN SELECT seq_collection_slot.NEXTVAL INTO :NEW.Slot_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_invoice_bi BEFORE INSERT ON INVOICE FOR EACH ROW BEGIN IF :NEW.Invoice_ID IS NULL THEN SELECT seq_invoice.NEXTVAL INTO :NEW.Invoice_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_stock_bi BEFORE INSERT ON STOCK FOR EACH ROW BEGIN IF :NEW.Stock_ID IS NULL THEN SELECT seq_stock.NEXTVAL INTO :NEW.Stock_ID FROM dual; END IF; END;
/

CREATE OR REPLACE TRIGGER trg_coupon_bi BEFORE INSERT ON COUPON FOR EACH ROW BEGIN IF :NEW.Coupon_ID IS NULL THEN SELECT seq_coupon.NEXTVAL INTO :NEW.Coupon_ID FROM dual; END IF; END;
/